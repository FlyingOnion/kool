// Code generated by kool-gen. DO NOT EDIT.

package main

import (
	"context"
	"errors"
	"time"

	"github.com/FlyingOnion/kool"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/util/wait"
	"k8s.io/client-go/tools/cache"
	"k8s.io/client-go/util/workqueue"
	"k8s.io/klog/v2"
{{ range .Imports }}
	{{ .Alias }} {{ quote .Pkg -}}
{{ end }}
)

var (
	ErrSyncTimeout = errors.New("Timed out waiting for caches to sync")
)

type {{ .Name }} struct {
	{{ range .ListerFields }}
	{{- . }}
	{{ end }}
	{{ range .HasSyncedFields }}
	{{- . }}
	{{ end }}
	queue        workqueue.RateLimitingInterface
	retryOnError int
}

func New{{ .Name }}(
	{{- range .Resources }}
	{{ .LowerKind }}Informer kool.Informer[{{ .GoType }}],
	{{- end }}
	queue workqueue.RateLimitingInterface,
    retryOnError int,
) *{{ .Name }} {
	c := &{{ .Name }}{
		queue:        queue,
		retryOnError: retryOnError,
	}
	{{ range .Resources }}
	{{- .LowerKind }}Informer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc:    {{ if .CustomAdd }}c.Add{{ .Kind }},{{ else }}nil,{{ end }}
		UpdateFunc: {{ if .CustomUpdate }}c.Update{{ .Kind }},{{ else }}nil,{{ end }}
		DeleteFunc: {{ if .CustomDelete }}c.Delete{{ .Kind }},{{ else }}nil,{{ end }}
	})
	{{ end }}
	{{ range .StructFieldInits }}
	{{- . }}
	{{ end }}
	return c
}

func (c *{{ .Name }}) Run(ctx context.Context, workers int) {
	defer utilruntime.HandleCrash()

	// Let the workers stop when we are done
	defer c.queue.ShutDown()
	logger := klog.FromContext(ctx)
	logger.Info("Starting {{ (index .Resources 0).LowerKind }} controller")
	defer logger.Info("Stopping {{ (index .Resources 0).LowerKind }} controller")

	// go c.informer.Run(stopCh)

	// Wait for all involved caches to be synced, before processing items from the queue is started
	if !cache.WaitForCacheSync(ctx.Done(){{ range .Resources }}, c.{{ .LowerKind }}Synced{{ end }}) {
		utilruntime.HandleError(ErrSyncTimeout)
		return
	}

	for i := 0; i < workers; i++ {
		go wait.UntilWithContext(ctx, c.runWorker, time.Second)
	}

	<-ctx.Done()
}

func (c *{{ .Name }}) runWorker(ctx context.Context) {
	for c.processNextItem(ctx) {
	}
}

func (c *{{ .Name }}) processNextItem(ctx context.Context) bool {
	// Wait until there is a new item in the working queue
	key, quit := c.queue.Get()
	if quit {
		return false
	}
	// Tell the queue that we are done with processing this key. This unblocks the key for other workers
	// This allows safe parallel processing because two pods with the same key are never processed in
	// parallel.
	defer c.queue.Done(key)

	// Invoke the method containing the business logic
	err := c.sync(ctx, key.(string))
	// Handle the error if something went wrong during the execution of the business logic
	c.handleErr(ctx, err, key)

	return true
}

func (c *{{ .Name }}) sync(ctx context.Context, key string) error {
	logger := klog.FromContext(ctx)
	namespace, name, err := cache.SplitMetaNamespaceKey(key)
	if err != nil {
		logger.Error(err, "Failed to split meta namespace cache key", "cacheKey", key)
		return err
	}
	return c.doSync(ctx, namespace, name)
}

func (c *{{ .Name }}) handleErr(ctx context.Context, err error, key any) {
	if err == nil {
		c.queue.Forget(key)
		return
	}

	logger := klog.FromContext(ctx)

	if c.queue.NumRequeues(key) < c.retryOnError {
		logger.Error(err, "Failed to sync object", "cacheKey", key)
		c.queue.AddRateLimited(key)
		return
	}

	c.queue.Forget(key)
	utilruntime.HandleError(err)
	logger.Info("Dropping object out of the queue", "cacheKey", key)
}
